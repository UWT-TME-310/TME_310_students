{
  "hash": "2e5bec8c532ea2f522d9258fb51ea633",
  "result": {
    "engine": "jupyter",
    "markdown": "---\ntitle: \"Functional Programming and Plotting\"\nsubtitle: \"TME 310 - Computational Physical Modeling\"\nauthor: \n  - \"Lorne Arnold, PhD, PE\"\ninstitute: \"University of Washington Tacoma\"\nformat:\n  revealjs:\n      logo: \"\"\n---\n\n# Functions\n\n## Why use functions?\n\nFunctions allow us to organize and re-use our work.\n\n\\ \n\nPart of the purpose of **looking back** at our solutions during reflection and self-grading is to identify ways our work may be useful for future problems.\n<!-- \nProblem     Possible solutions\nHungry      hunt or gather food \n            look for a grocery store or restaurant\n\n\nEngineering task        Write new code from scratch\n                        Re-use the old code (copy and paste?) -->\n\n## Anatomy of a function\n\n::: incremental\n1. The **function signature** defines function's *name* and *inputs* it uses.\n2. The **function body** contains the code that runs when the function is *called*.\n:::\n\n::: {.fragment .fade-in}\nHere's an example of a function called `average`:\n:::\n\n::: {.fragment .fade-in}\n```{.python code-line-numbers=\"1|2,3,4\"}\ndef average(x, y):      # <--- the function signature   \n    total = x + y       # <--- the function body starts here... \n    avg = total / 2 \n    return avg          # <--- and ends here\n```\n:::\n\n## Function signature\n\n```{.python code-line-numbers=\"1,\"}\ndef average(x, y):      # <--- the function signature   \n    total = x + y        \n    avg = total / 2 \n    return avg          \n```\n\nThe **function signature** consists of:\n\n::: incremental\n* the `def` keyword\n* the function name (e.g., `average`)\n* the function input parameters: `(x, y)`\n  * input parameters are optional, the parentheses `()` are not\n  * assign default values as follows: `(x=1,y=2)`\n* a colon (`:`) at the end of the line\n:::\n\n## Function body\n\n```{.python code-line-numbers=\"2,3,4\"}\ndef average(x, y):        \n    total = x + y       # <--- the function body starts here... \n    avg = total / 2 \n    return avg          # <--- and ends here\n```\n\nThe **function body** consists of:\n\n::: incremental\n* an **indented** code block\n  * usually indented by 4 spaces (or tab)\n  * can be 1 or more spaces but **must** be consistent\n* valid Python statements (or the `pass` keyword) \n* optional: a `return` statement\n:::\n\n## Function calls\n\nUser-defined functions are called just like built in functions but they need to be called after their defined.\n\n::: {.fragment .fade-in}\n```{.python code-line-numbers=\"1|8|9\"}\nvalue = average(0, 1)   # <--- invalid function call\n\ndef average(x, y):        \n    total = x + y       \n    avg = total / 2 \n    return avg          \n\nvalue = average(x=0, y=1)   # <--- valid function call\nvalue = average(0, 1)       # <--- also valid (order matters)\n```\n:::\n\n## Default values\n\nFunctions can have default values for some input parameters. \nParameters with default values are optional.\n\nRequired parameters have to come **before** optional parameters.\n\n::: {.fragment .fade-in}\n```{.python code-line-numbers=\"1|6|7\"}\ndef average(x, y=10):   # <--- y is optional now\n    total = x + y       \n    avg = total / 2 \n    return avg          \n\nvalue = average(0)      # <--- will average 0 and 10\nvalue = average(0,5)    # <--- will average 0 and 5\n```\n:::\n\n\\ \n\n::: {.fragment .fade-in}\n```{.python}\ndef average(x=10, y):   # <--- invalid\n   ...     \n```\n:::\n\n::: {.fragment .fade-in}\n```\nSyntaxError: parameter without a default follows parameter with a default    \n```\n:::\n\n# Plotting\n\n## Python libraries\n\nPython has several built-in and external **libraries** that extend its capabilities.\n\nThe two we'll use most in this course are\n\n::: incremental\n* Numpy\n  * Array calculations\n* Matplotlib\n  * Plotting\n:::\n\n:::{.fragment .fade-in}\nWe'll look at Matplotlib today\n:::\n\n## Importing libraries\n\nImport libraries with the `import` statement\n\n\\\n\n::: {.fragment .fade-in}\nIt's common to *aliases* as shorthand for imported modules by using the `as` keyword:\n:::\n\n::: {.fragment .fade-in}\n```{.python code-line-numbers=\"\"}\nimport matplotlib as mpl\n```\n:::\n\n\\\n\n::: {.fragment .fade-in}\nThis imports the entire `matplotlib` library into your code. You can use `mpl` to refer to it.\n:::\n\n## Partial imports\n\nSometimes libraries are large and we only need a small part of them.\nIn these cases, we can import a specific function using the `from` keyword:\n\n\n::: {.fragment .fade-in}\n```{.python code-line-numbers=\"\"}\nfrom numpy import array # <---- just imports the function numpy.array()\n```\n:::\n\n::: {.fragment .fade-in}\n\nSubcomponents of libraries are accessed with `.` syntax\n:::\n\n\\ \n\n::: {.fragment .fade-in}\nOr we can import a submodule:\n:::\n\n\n::: {.fragment .fade-in}\n```{.python code-line-numbers=\"\"}\nimport matplotlib.pyplot as plt \n```\n:::\n\n## Basic Matplotlib use\n\nIt's typical to start using Matplotlib with:\n\n```{.python code-line-numbers=\"\"}\nimport matplotlib.pyplot as plt \n```\n\n::: {.fragment .fade-in}\nI'll add a link to the Matplotlib documentation page to the course website.\nBut for today, we'll just look at one plotting fuction: `matplotlib.pyplot.plot()`\n:::\n\n## A line plot\n\n::: {#61c92396 .cell output-location='fragment' execution_count=1}\n``` {.python .cell-code code-line-numbers=\"1|2,3|4\"}\nimport matplotlib.pyplot as plt \nx = [1, 2, 3, 4, 5]\ny = [-1, 0, 1, 3, 6]\nplt.plot(x,y)\n```\n\n::: {.cell-output .cell-output-display}\n![](functional_programming_files/figure-revealjs/cell-2-output-1.png){width=792 height=411}\n:::\n:::\n\n\n## A line plot\n\n::: {#1057b0e1 .cell output-location='fragment' execution_count=2}\n``` {.python .cell-code code-line-numbers=\"2|3|4,5,6\"}\nimport matplotlib.pyplot as plt \nx = list(range(100))\ny = []\nfor x_value in x:\n  y_value = x_value ** 2\n  y.append(y_value)\nplt.plot(x,y)\n```\n\n::: {.cell-output .cell-output-display}\n![](functional_programming_files/figure-revealjs/cell-3-output-1.png){width=815 height=411}\n:::\n:::\n\n\n",
    "supporting": [
      "functional_programming_files"
    ],
    "filters": [],
    "includes": {}
  }
}